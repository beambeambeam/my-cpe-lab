import java.time.LocalDate
import java.time.format.DateTimeFormatter

// Task properties can be overridden with -Pname=... -Poutdir=... -PdateFormat=... -PdryRun=true
def dateFormat = project.findProperty('dateFormat') ?: 'yyyy-MM-dd'
def dateStr = LocalDate.now().format(DateTimeFormatter.ofPattern(dateFormat))
def basename = project.findProperty('name') ?: "${dateStr}-submission"
def outdir = project.findProperty('outdir') ?: '.'
def dryRun = project.hasProperty('dryRun') && project.property('dryRun') != 'false'

def excludes = [
    '**/build/**',
    '**/app/build/**',
    '**/.gradle/**',
    '**/.git/**',
    '**/node_modules/**',
    '**/venv/**',
    '**/__pycache__/**',
    '**/*.class',
    '**/*.DS_Store',
    '**/*.iml'
]

tasks.register('makeSubmissionZip', Zip) { Zip zipTask ->
    group = 'packaging'
    description = "Create a ZIP of the project named ${basename}.zip (use -Pname, -Poutdir, -PdateFormat)"
    archiveFileName.set("${basename}.zip")
    destinationDirectory.set(layout.projectDirectory.dir(outdir))
    from(projectDir) {
        include '**/*'
        excludes.each { exclude it }
    }
    // If dryRun is requested, disable the actual zip task during execution.
    enabled = !dryRun
}

tasks.register('makeSubmissionZipDryRun') {
    group = 'packaging'
    description = 'Print what would be zipped (dry run) â€” does not create an archive'
    doLast {
        def dest = layout.projectDirectory.dir(outdir).asFile.canonicalPath + File.separator + "${basename}.zip"
        println "DRY RUN: would create archive: ${dest}"
        println 'Includes: all project files under project root (.)'
        println "Excludes: ${excludes.join(', ')}"
        println "Invoke real task with: ./gradlew makeSubmissionZip ${dryRun ? '' : ''} -Pname=<name> -Poutdir=<outdir> -PdateFormat=${dateFormat}"
    }
}
